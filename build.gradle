buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            name = 'sponge'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven { url = "https://plugins.gradle.org/m2/" }
        maven {
            name = "TimeConqueror's Maven"
            url = "https://repo.repsy.io/mvn/timeconqueror/mc/"
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.0.187-patched'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.72"
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

apply from: 'gradle/scripts/configs.gradle'

version = "${buildProps.minecraft.version}-${buildProps.lootgames.version}"
group = 'ru.timeconqueror' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'LootGames'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
}

repositories {
    flatDir {
        dirs 'runtimeMods'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        name = "TimeConqueror's Maven"
        url = "https://repo.repsy.io/mvn/timeconqueror/mc/"
    }
    mavenCentral()
    mavenLocal()
}

minecraft {
    // Mappings used are generated by Mappificator (https://github.com/alcatrazEscapee/mappificator)
    // See the project README page for how to generate the mapping set.
    // Otherwise, we use official mappings in a build script version
    def officialVersion = System.getenv("OFFICIAL_MAPPINGS")
    if (officialVersion == null) {
        mappings channel: 'snapshot', version: buildProps.snapshot_mappings
    } else {
        mappings channel: 'official', version: buildProps.mc_version
    }
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    def jvmArgs = Arrays.asList('-Dmixin.env.disableRefMap=true'.split(' '))
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'lootgames.logging.markers', 'LOOTGAME'

            setJvmArgs(jvmArgs)

            mods {
                lootgames {
                    source sourceSets.main
                    resource sourceSets.main.resources
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            //property 'forge.logging.console.level', 'debug'

            setJvmArgs(jvmArgs)

            mods {
                lootgames {
                    source sourceSets.main
                    resource sourceSets.main.resources
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
//            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
//            property 'forge.logging.console.level', 'debug'
            args '--mod', 'lootgames', '--all', '--output', ("\"" + projectDir.path + "/src/generated/resources/\"")

            setJvmArgs(jvmArgs)

            mods {
                lootgames {
                    source sourceSets.main
                    resource sourceSets.main.resources
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.16.4-35.1.7'

    if (file("runtimeMods").exists()) {
        file("runtimeMods").eachFile { file ->
            def splitPos = file.name.lastIndexOf("-")
            def modartifact = file.name.substring(0, splitPos)
            def modversion = file.name.substring(splitPos + 1, file.name.length() - 4)
            def modreference = "lib:$modartifact:$modversion"

            dependencies {
                runtimeOnly fg.deobf(project.dependencies.create(modreference) {
                    transitive = false
                })
            }
        }
    }

    implementation 'org.jetbrains:annotations:18.0.0'

    implementation(fg.deobf("ru.timeconqueror:TimeCore:1.16.4-3.1.0.2.build101:dev", true))

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "org.jetbrains.kotlin:kotlin-reflect"

//    runtimeOnly fg.deobf("mezz.jei:jei-1.14.4:6.0.0.27")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "lootgames",
                "Specification-Vendor"    : "Time_Conqueror",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Time_Conqueror",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

//def mavenLinkRepsy = "https://repo.repsy.io/mvn/${secretProps.repsy.user}/${secretProps.repsy.repo_name}"
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
//        if (secretProps != null) {
//            maven {
//                url mavenLinkRepsy
//                credentials {
//                    username secretProps.repsy.user
//                    password secretProps.repsy.password
//                }
//            }
//        }
    }
}