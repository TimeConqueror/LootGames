buildscript {
    repositories {
        maven {
            url = 'https://repo.spongepowered.org/repository/maven-public/'
            content { includeGroup "org.spongepowered" }
        }
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'idea'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.jetbrains.kotlin.jvm' version '1.8.22'
    // OPTIONAL Kotlin Serialization plugin
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.8.22'
    id "io.freefair.lombok" version "8.0.1"
}

apply plugin: 'org.spongepowered.mixin'

apply from: 'gradle/scripts/configs.gradle'

version = "${minecraft_version}-${mod_version}"
group = mod_group_id
base {
    archivesName = mod_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true

    def extraArgs = []
    def extraVmArgs = []
    runs {
        client {
            workingDirectory project.file('run')

//            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run')
            //property 'forge.logging.markers', 'REGISTRIES'

            //property 'forge.logging.console.level', 'debug'

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        data {
            workingDirectory project.file('run')

//            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
    config "mixins.${mod_id}.json"

    debug = true
    debug.verbose = true
    debug.countInjections = true
    debug.export = true
    checks.interfaces = true
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://repo.repsy.io/mvn/timeconqueror/mc/" }
    maven { url = 'https://thedarkcolour.github.io/KotlinForForge/' }
}

def tcVersion = tc_version_range.replace(Map.of(",", "", "[", "", ")", ""))

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation fg.deobf("ru.timeconqueror:TimeCore:${minecraft_version}-${tcVersion}")
    implementation 'thedarkcolour:kotlinforforge:4.3.0'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_id}",
                "Specification-Vendor"    : mod_authors,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Vendor"   : mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
        minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
        forge_version       : forge_version, forge_version_range: forge_version_range,
        loader_version_range: loader_version_range,
        mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: '1',
        mod_authors         : mod_authors, tc_version_range: tc_version_range
]

processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    it.archiveClassifier = 'sources'
}

def inProjectMaven = "${project.projectDir.absolutePath.replace("\\", "/")}/maven"
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId archivesBaseName
            artifact jar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url inProjectMaven
        }
        if (secretProps != null) {
            maven {
                url "https://repo.repsy.io/mvn/${secretProps.repsy.user}/${secretProps.repsy.repo_name}"
                credentials {
                    username secretProps.repsy.login
                    password secretProps.repsy.password
                }
            }
        }
    }
}