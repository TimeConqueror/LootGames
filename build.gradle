buildscript {
    repositories {
        maven {
            url = 'https://repo.spongepowered.org/repository/maven-public/'
            content { includeGroup "org.spongepowered" }
        }
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'com.github.johnrengelman.shadow' version '7.0.0'
    id 'org.jetbrains.kotlin.jvm' version '1.8.0'
}

apply plugin: 'org.spongepowered.mixin'

apply from: 'gradle/scripts/configs.gradle'
apply from: 'https://raw.githubusercontent.com/TimeConqueror/Time-Core/1.19/gradle/scripts/timecore.gradle'

version = "${buildProps.minecraft.version}-${buildProps.lootgames.version}"
group = 'ru.timeconqueror'
archivesBaseName = "LootGames"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: '1-1.19.3'

    def extraArgs = []
    def extraVmArgs = []
    runs {
        client {
            workingDirectory project.file('run')

//            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                timecore {
                    source sourceSets.main
                    source sourceSets.test

                    resource sourceSets.main.resources
                    resource sourceSets.test.resources
                }
            }
        }

        server {
            workingDirectory project.file('run')
            //property 'forge.logging.markers', 'REGISTRIES'

            //property 'forge.logging.console.level', 'debug'

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                timecore {
                    source sourceSets.main
                    source sourceSets.test

                    resource sourceSets.main.resources
                    resource sourceSets.test.resources
                }
            }
        }

        data {
            workingDirectory project.file('run')

//            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'timecore', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            setArgs(extraArgs)
            setJvmArgs(extraVmArgs)

            mods {
                timecore {
                    source sourceSets.main
                    source sourceSets.test

                    resource sourceSets.main.resources
                    resource sourceSets.test.resources
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.3-44.1.5'
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "lootgames",
                "Specification-Vendor"    : "Time_Conqueror",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : archiveVersion,
                "Implementation-Vendor"   : "Time_Conqueror",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    it.archiveClassifier = 'sources'
}

def inProjectMaven = "${project.projectDir.absolutePath.replace("\\", "/")}/maven"
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId archivesBaseName
            artifact shadowJar
            artifact sourcesJar
        }
    }
    repositories {
        maven {
            url inProjectMaven
        }
        if (secretProps != null) {
            maven {
                url "https://repo.repsy.io/mvn/${secretProps.repsy.user}/${secretProps.repsy.repo_name}"
                credentials {
                    username secretProps.repsy.login
                    password secretProps.repsy.password
                }
            }
        }
    }
}